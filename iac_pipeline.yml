## Infra Pipeline
trigger: none
parameters:
- name: environment
  type: string
  default: none
  values: 
   - dev
   - prod

- name: resource
  type: string
  default: none
  values:
   - none
   - vnet-deployment
  
- name: terraform
  type: string
  default: plan
  values: 
   - plan
   - apply
   - destroy

pool:
  vmImage: ubuntu-latest

variables:
- ${{ if eq(parameters.environment, 'dev') }}:
  - group: dev-azure-vgroup
- ${{ if eq(parameters.environment, 'prod') }}:
  - group: prod-azure-vgroup

stages:
## Azure VNET
- ${{ if and(eq(parameters.resource, 'vnet-deployment'), eq(parameters.terraform, 'plan')) }}:
  - stage: "TerraformPlan"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/akrish/v1')))
    displayName: Azure VNet Deployment
    jobs:
      - job: Plan
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'
          - task: CmdLine@2
            displayName: tfversion check
            inputs:
              script: 'terraform --version'
          - task: TerraformTaskV4@4
            displayName: tf init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
              backendServiceArm: '$(backendservice_connection)'
              backendAzureRmResourceGroupName: '$(resource_group_name)'
              backendAzureRmStorageAccountName: '$(storage_account)'
              backendAzureRmContainerName: '$(sa_container_name)'
              backendAzureRmKey: 'vnet-$(current_env)-$(tf_statefile)'
          - task: TerraformTaskV4@4
            displayName: tf validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
          - task: TerraformTaskV4@4
            displayName: tf plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
              commandOptions: '$(env_tfvars)'
              environmentServiceNameAzureRM: '$(tfservice_connection)'
          - task: TerraformTaskV4@4
            displayName: tf test
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'

- ${{ if and(eq(parameters.resource, 'vnet-deployment'), eq(parameters.terraform, 'apply')) }}:
  - stage: "TerraformApply"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/akrish/v1')))
    displayName: Azure VNet Deployment
    jobs:
      - job: Apply
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: tf init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
              backendServiceArm: '$(backendservice_connection)'
              backendAzureRmResourceGroupName: '$(resource_group_name)'
              backendAzureRmStorageAccountName: '$(storage_account)'
              backendAzureRmContainerName: '$(sa_container_name)'
              backendAzureRmKey: 'vnet-$(current_env)-$(tf_statefile)'
          - task: TerraformTaskV4@4
            displayName: tf validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
          - task: TerraformTaskV4@4
            displayName: tf plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
              commandOptions: '$(env_tfvars) -out $(env_tfplan)'
              environmentServiceNameAzureRM: '$(tfservice_connection)'
          - task: TerraformTaskV4@4
            displayName: tf apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
              commandOptions: '$(env_tfplan)'
              environmentServiceNameAzureRM: '$(tfservice_connection)'
          - task: TerraformTaskV4@4
            displayName: tf output
            inputs:
              provider: 'azurerm'
              command: 'custom'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
              customCommand: 'output'
              commandOptions: '-json'
              outputTo: 'file'
              fileName: 'vnet-output.json'
              environmentServiceNameAzureRM: '$(tfservice_connection)'

- ${{ if and(eq(parameters.resource, 'vnet-deployment'), eq(parameters.terraform, 'destroy')) }}:
  - stage: "TerraformDestroy"
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.SourceBranch'], 'refs/heads/akrish/v1')))
    displayName: Azure VNet Delete
    jobs:
      - job: Destroy
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: tf init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
              backendServiceArm: '$(backendservice_connection)'
              backendAzureRmResourceGroupName: '$(resource_group_name)'
              backendAzureRmStorageAccountName: '$(storage_account)'
              backendAzureRmContainerName: '$(sa_container_name)'
              backendAzureRmKey: 'vnet-$(current_env)-$(tf_statefile)'
          - task: TerraformTaskV4@4
            displayName: tf validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
          - task: TerraformTaskV4@4
            displayName: tf plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
              commandOptions: '$(env_tfvars) -destroy -out $(env_tfplan)'
              environmentServiceNameAzureRM: '$(tfservice_connection)'
          - task: TerraformTaskV4@4
            displayName: tf destroy
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_fulltest/iac_modules/azure_vnet'
              commandOptions: '-destroy -auto-approve $(env_tfplan)' 
              environmentServiceNameAzureRM: '$(tfservice_connection)'
